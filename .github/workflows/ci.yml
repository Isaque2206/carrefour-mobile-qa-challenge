name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  android:
    name: Build & Test (Android Emulator + Appium)
    runs-on: macos-14
    timeout-minutes: 60

    env:
      NODE_VERSION: '20'
      APK_URL_DEFAULT: "https://github.com/webdriverio/native-demo-app/releases/download/0.4.0/Android-NativeDemoApp-0.4.0.apk"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install deps (npm + Appium driver)
        run: |
          set -euxo pipefail
          npm ci
          npx appium -v || true
          npx appium driver install uiautomator2 || true
          npx wdio --version || true

      - name: Download APK (com verificação)
        run: |
          set -euxo pipefail
          mkdir -p ci-logs
          APK_URL="${{ vars.APK_URL != '' && vars.APK_URL || env.APK_URL_DEFAULT }}"
          echo "Baixando: $APK_URL"
          curl -L "$APK_URL" -o app.apk
          test -s app.apk
          # checa assinatura ZIP (PK)
          head -c 2 app.apk | hexdump -v -e '/1 "%02X"' | grep -qi '^504B$'
          echo "APK_PATH=$PWD/app.apk" >> $GITHUB_ENV

      - name: Run tests on Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: Nexus 5X
          force-avd-creation: true
          disable-animations: true
          emulator-options: -no-window -no-snapshot -no-boot-anim -gpu swiftshader_indirect
          script: |
            set -euxo pipefail
            adb wait-for-device
            # inicia Appium e guarda logs
            npx appium --base-path /wd/hub --log-level warn > ci-logs/appium.log 2>&1 &
            # espera porta 4723 responder
            for i in {1..60}; do (nc -z localhost 4723 && break) || sleep 1; done
            # roda WDIO apontando pro APK baixado
            npx wdio run wdio.android.local.conf.js

      - name: Upload CI logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: ci-logs

      - name: Save Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Build Allure site
        if: always()
        run: |
          set -euxo pipefail
          npx allure generate --clean allure-results -o allure-site || true

      - name: Upload Allure site
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-site
          path: allure-site

  deploy-allure:
    name: Deploy Allure to GitHub Pages
    needs: android
    runs-on: ubuntu-latest
    if: always()  # publica mesmo se os testes falharem, quando existir o artefato
    steps:
      - name: Download site
        uses: actions/download-artifact@v4
        with:
          name: allure-site
          path: ./allure-site
        continue-on-error: true
      - name: Deploy
        if: success() || (contains(steps['Download site'].outcome, 'success'))
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-site
