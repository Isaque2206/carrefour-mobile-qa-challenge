name: Android E2E

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write

defaults:
  run:
    shell: bash

jobs:
  test-android:
    name: Build & Test (Android Emulator + Appium)
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install deps + alinhar Appium 3.x
        run: |
          set -euxo pipefail
          mkdir -p ci-logs

          # Instala tudo que está no lockfile
          npm ci

          # Força Appium 3 na árvore do projeto (resolve o peer do driver 5.x)
          npm i -D appium@^3.0.1 --no-audit --no-fund

          # Confere versão do servidor
          npx -y appium@3 --version

          # Instala o driver UiAutomator2 compatível (linha 5.x)
          npx -y appium@3 driver install uiautomator2@^5

          # Lista pra confirmar
          npx -y appium@3 driver list --installed


      - name: Download APK (robusto, sem --latest)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euxo pipefail
          tmpdir="$(mktemp -d)"

          # 1) Tenta pegar o tag mais recente via JSON
          TAG="$(gh release view --repo webdriverio/native-demo-app --json tagName -q .tagName 2>/dev/null || true)"

          # 2) Fallback: lista releases (sem draft/pre) e pega o mais novo
          if [ -z "${TAG:-}" ] || [ "${TAG}" = "null" ]; then
            TAG="$(gh release list --repo webdriverio/native-demo-app --limit 50 --json tagName,isDraft,isPrerelease,createdAt \
              -q 'map(select(.isDraft==false)) | map(select(.isPrerelease==false)) | sort_by(.createdAt) | reverse | .[0].tagName' || true)"
          fi

          # 3) Último fallback: tag conhecida
          if [ -z "${TAG:-}" ] || [ "${TAG}" = "null" ]; then
            TAG="v1.0.8"
          fi
          echo "Usando TAG: $TAG"

          gh release download "$TAG" --repo webdriverio/native-demo-app -D "$tmpdir" -p '*[Aa]ndroid*apk'
          APK_FILE="$(find "$tmpdir" -name '*.apk' | head -n1)"
          test -n "$APK_FILE"
          mv "$APK_FILE" app.apk

          # Checagem simples do header ZIP (PK)
          test "$(head -c2 app.apk | hexdump -v -e '/1 "%02X"')" = "504B"
          echo "APK_PATH=$GITHUB_WORKSPACE/app.apk" >> "$GITHUB_ENV"

      - name: Run tests on Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: Pixel 5
          force-avd-creation: true
          emulator-boot-timeout: 1200
          disable-animations: true
          emulator-options: -no-window -no-snapshot -no-boot-anim -gpu swiftshader_indirect -camera-back none -camera-front none -no-metrics
          script: |
            set -euxo pipefail
            adb devices
            adb wait-for-device
            adb shell getprop ro.build.version.release || true

            # Inicia Appium v3 e loga
            npx -y appium@3 --base-path / --log-level warn > ci-logs/appium.log 2>&1 &
            for i in {1..180}; do (nc -z 127.0.0.1 4723 && break) || sleep 1; done

            # Override WDIO para CI (sequencial + flags para evitar erros do settings)
            cat > wdio.ci.android.conf.js <<'EOF'
            const { config } = require('./wdio.android.local.conf.js');
            config.maxInstances = 1;
            const caps = Array.isArray(config.capabilities) ? config.capabilities : [config.capabilities || {}];
            config.capabilities = caps.map(c => ({
              ...c,
              maxInstances: 1,
              'appium:ignoreHiddenApiPolicyError': true,
              'appium:skipDeviceInitialization': true,
            }));
            module.exports.config = config;
            EOF
            node -e "const c=require('./wdio.ci.android.conf.js').config; if(c.maxInstances!==1) process.exit(1); console.log('WDIO CI override OK')"

            # Executa specs 100% sequenciais no mesmo emulador
            EXIT=0
            for SPEC in $(ls -1 test/specs/*.spec.js); do
              echo ">>> Running spec: $SPEC"
              npx wdio run wdio.ci.android.conf.js --spec "$SPEC" || EXIT=$?
              if [ $EXIT -ne 0 ]; then break; fi
            done
            exit $EXIT

      - name: Upload CI logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: ci-logs/*
          if-no-files-found: ignore

      - name: Gerar Allure site
        if: always()
        run: |
          set -euxo pipefail
          npx allure generate --clean allure-results -o allure-site || true

      - name: Upload Allure site (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-site
          path: allure-site

  deploy-allure:
    name: Deploy Allure to GitHub Pages
    needs: test-android
    if: always()
    runs-on: ubuntu-latest
    concurrency:
      group: gh-pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Allure site
        uses: actions/download-artifact@v4
        with:
          name: allure-site
          path: ./allure-site

      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
